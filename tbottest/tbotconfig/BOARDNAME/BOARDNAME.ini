# you can replace strings in this file on boot
# in set_board_cfg() in boardspecific.py
#
# see example `set-board-cfg-temp-str-none-filename-str-none`_
[default]
user = @@USERNAME@@
date = @@TBOTDATE@@
board = @@TBOTBOARD@@
postbuild = local
serverip = @@TBOTSERVERIP@@
ipaddr = @@TBOTIPADDR@@
machine = @@TBOTMACHINE@@
denxlayer = meta-denx-kas
denxlayerbranch = master
vendor = denx
tftp_subdir = @@TFTPSUBDIR@@
deploydir = tmp/deploy/images/${machine}
nfs_path = @@TBOTLABBASENFSPATH@@/${machine}/${postbuild}
subdir = ${vendor}/${machine}
rootfsname = @@ROOTFSNAME@@
sdk_bin = name_of_sdk_shell_script

[TC]
    uboot_death_strings = ['Kernel panic']
    tmpdir = /tmp
    ignore_hostkey = True

    ############################################
    # Imagenames
    ############################################
    rescueimage = rescueimage-fit.itb
    qspiheader = "qspiheader.bin"
    splimage = "SPL"

    ############################################
    # U-Boot
    ############################################
    uboot_boot_timeout = None
    uboot_autoboot_timeout = 0.05
    uboot_autoboot_keys = SPACE
    # other possible values
    # send bytes (here 2 times ESC
    # uboot_autoboot_keys = bytearray:1b1b
    # uboot_autoboot_keys = K

    # if you need to set another U-Boot prompt (default is "=> "
    # uboot_prompt = "U-Boot# "

    ub_env = [{"name":"serverip", "val":"${default:serverip}"}, \
      {"name":"ipaddr", "val":"${default:ipaddr}"}, \
      {"name":"netmask", "val":"255.255.255.0"}, \
      {"name":"date", "val":"${default:date}"}, \
      {"name":"tmpaddr", "val":"83000000"}, \
      {"name":"tftpp", "val":"${default:tftp_subdir}"}, \
      {"name":"loadmlo", "val":"tftp $${tftpp}/MLO"}, \
      {"name":"updmlo", "val":"mmc dev 0 0;mmc rescan;mmc write $${loadaddr} 0x100 0x100;mmc write $${loadaddr} 0x200 0x100"}, \
      {"name":"cmpmlo", "val":"mmc read $${tmpaddr} 0x100 0x200;cmp.b $${loadaddr} $${tmpaddr} $${filesize}"}, \
      {"name":"loadub", "val":"tftp $${tftpp}/u-boot.img"}, \
      {"name":"updub", "val":"mmc dev 0 0;mmc rescan;mmc write $${loadaddr} 0x300 0x400"}, \
      {"name":"cmpub", "val":"mmc read $${tmpaddr} 0x300 0x400;cmp.b $${loadaddr} $${tmpaddr} $${filesize}"}, \
      {"name":"loadtftpk", "val":"tftp $${loadaddr} $${tftpp}/uImage"}, \
      {"name":"loadtftpfdt", "val":"run choosefdtbydisplayrev;tftp $${fdtaddr} $${tftpp}/$${fdtfile}"}, \
      {"name":"hostname", "val":"${default:board}"}, \
      {"name":"netdev", "val":"eth0"}, \
      {"name":"addip", "val":"setenv bootargs $${bootargs} ip=$${ipaddr}:$${serverip}:$${gatewayip}:$${netmask}:$${hostname}:$${netdev}:off"}, \
      {"name":"nfsopt", "val":",nfsvers=3"}, \
      {"name":"args_nfs", "val":"setenv bootargs console=$${console} $${optargs} root=/dev/nfs nfsroot=${default:serverip}:${default:nfs_path}/nfs$${nfsopt};run addip"}, \
      {"name":"tftp_nfs", "val":"run loadtftpk loadtftpfdt args_nfs;bootm $${loadaddr} - $${fdtaddr}"}, \
      {"name":"tftp_mmc", "val":"run loadtftpk loadtftpfdt args_mmc;bootm $${loadaddr} - $${fdtaddr}"}, \
      {"name":"optargs", "val":"consoleblank=0 vt.global_cursor_default=0 lpj=2988032 quiet "}, \
      {"name":"end", "val":"end"}]

    ### uuu setup
    fb_res_setup = run ramargs addcon addmtd addopt
    fb_res_boot = bootm 94000000
    fb_cmd = fastboot usb 0

    ############################################
    # Linux
    ############################################
    linux_user = root
    linux_password = root

    linux_boot_timeout = 200
    linux_login_delay = 3
    linux_init_timeout = "2"

    linux_init = [ \
        {"cmd":"cat /proc/cmdline"}, \
        {"cmd":"uname -a"}, \
        ]

    beep = [{"freq": "440", "length":"1000"}]

    dmesg = [
        "CPU: ARMv7 Processor \[413fc082\] revision 2 (ARMv7), cr=50c5387d",
       ]

    dmesg_false = [
       "crash",
       ]

    leds = [
       {"path":"/sys/class/leds/led-orange", "bootval":"0", "onval":"1"},
       ]

    lnx_commands = [
        {"cmd":"uname -a", "val":"armv7l GNU/Linux"},
        {"cmd":"echo Hello", "val":"undef"},
        ]

    ############################################
    # swupdate
    ############################################
    swuethdevice = eth0
    swuimage = swu-image.swu

    ############################################
    # kas
    ############################################
    kas = {
       "kasurl" : "https://github.com/siemens/kas.git",
       "kasversion" : "4.0",
       "build_machine" : "${default:machine}",
       "subdir" : "${default:subdir}",
       "kascontainer" : @@KASCONTAINER@@,
       "git_credential_store" : "/home/${default:user}/.git-credentials",
       "ssh_dir" : "/home/${default:user}/.ssh",
       "kaslayer" : "git@gitlab.denx.de:denx/${default:denxlayer}",
       "kaslayername" : "${default:denxlayer}",
       "kaslayerbranch" : "master",
       "kasconfigfile" : "${default:denxlayer}/kas-denx.yml",
       "bitbakeenvinit" : "source/poky/oe-init-build-env",
       "envinit" : ["export PATH=/home/hs/data/bins/make-4.3/bin:$${PATH}"],
       "buildtargets" : [
           "core-image-minimal",
           "meta-toolchain-qt5",
           "bitbake -c populate_sdk core-image-dev",
           ],
       "bitbakeoptions" : ["-q", "-q"],
       }

    kas_check_files = [
       "${default:deploydir}/SPL",
       "${default:deploydir}/u-boot.img",
       "${default:deploydir}/fitImage",
       "tmp/deploy/sdk/${default:sdk_bin}",
       ]
    kas_results = [
       "SPL",
       "u-boot.img",
       "fitImage",
       ]

# currently I use an AM335x based board for CI
# so for other SoCs this example is not valid
[TC_BOARDNAME]
lnx_dump_files = [{"revfile":"control_module.reg", "startaddr":"0x44e10800", "endaddr":"0x44e10808", "mask":"0xffffffff", "readtype":"w", "difffile":"diff_control", "timeout":"None"}]
