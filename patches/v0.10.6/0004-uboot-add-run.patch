From bdd19dd5982267ab64dd2b3b2a4193d41a056a06 Mon Sep 17 00:00:00 2001
From: Heiko Schocher <hs@denx.de>
Date: Thu, 25 Jun 2020 06:59:17 +0200
Subject: [PATCH 04/18] uboot: add run()

Signed-off-by: Heiko Schocher <hs@denx.de>
---
 tbot/decorators.py          |  3 ++
 tbot/machine/board/uboot.py | 55 ++++++++++++++++++++++++++++++++++++-
 2 files changed, 57 insertions(+), 1 deletion(-)

diff --git a/tbot/decorators.py b/tbot/decorators.py
index 992b89f9..accbf5b9 100644
--- a/tbot/decorators.py
+++ b/tbot/decorators.py
@@ -366,6 +366,8 @@ def with_linux(tc: F_lnx) -> F_linux:
                 raise TypeError(
                     f"Argument to {tc!r} must either be a lab-host or a board linux (found {arg!r})"
                 )
+            else:
+                lh = tbot.selectable.labhost

             # Acquire Linux
             if arg is None or isinstance(arg, linux.Lab):
@@ -374,6 +376,7 @@ def with_linux(tc: F_lnx) -> F_linux:
             else:
                 lnx = cx.enter_context(arg)

+            tbot.selectable.labhost = lh
             return tc(lnx, *args, **kwargs)

     # Adjust annotation
diff --git a/tbot/machine/board/uboot.py b/tbot/machine/board/uboot.py
index e8a60bf8..f19447a9 100644
--- a/tbot/machine/board/uboot.py
+++ b/tbot/machine/board/uboot.py
@@ -23,7 +23,7 @@ from typing import List

 import tbot
 from .. import shell, machine, channel
-from ..linux import special
+from ..linux import special, util


 class UBootStartupEvent(tbot.log.EventIO):
@@ -155,6 +155,7 @@ def _hush_quote(s: str) -> str:

 ArgTypes = typing.Union[str, special.Special]

+Self = typing.TypeVar("Self", bound="UBootShell")

 class UBootShell(shell.Shell, UbootStartup):
     """
@@ -415,6 +416,58 @@ class UBootShell(shell.Shell, UbootStartup):

         tbot.log.message("Exiting interactive shell ...")

+    @contextlib.contextmanager
+    def run(
+        self: Self, *args: typing.Union[str, special.Special[Self]]
+    ) -> typing.Iterator[util.RunCommandProxy]:
+        def cmd_context(
+            proxy_ch: util.RunCommandProxy,
+        ) -> typing.Generator[str, None, typing.Tuple[int, str]]:
+            cmd = self.escape(*args)
+
+            with contextlib.ExitStack() as cx:
+                ev = cx.enter_context(tbot.log_event.command(self.name, cmd))
+                proxy_ch.sendline(cmd, read_back=True)
+                cx.enter_context(proxy_ch.with_stream(ev, show_prompt=False))
+
+                assert proxy_ch.prompt is not None, "prompt is missing!"
+
+                # During the context (before calling terminate), the prompt
+                # string may never appear in the command output.  If it does
+                # anyway, raise an Exception.
+                #
+                # The exception type is dynamically created here to capture
+                # some variables from the context.  This way, the context knows
+                # of an early exit happening and can behave differently because
+                # of it.
+
+                early_exit = False
+
+                class CommandEndedException(util.CommandEndedException):
+                    def __init__(self, string: bytes):
+                        nonlocal early_exit
+                        early_exit = True
+                        proxy_ch._pre_terminate()
+                        super().__init__(string)
+
+                    def __str__(self) -> str:
+                        return f"The interactive command {cmd!r} exited prematurely."
+
+                with proxy_ch.with_death_string(proxy_ch.prompt, CommandEndedException):
+                    yield cmd
+
+                output = ""
+                if not early_exit:
+                    output = proxy_ch.read_until_prompt()
+                ev.data["stdout"] = ev.getvalue()
+
+            proxy_ch.sendline("echo $?", read_back=True)
+            retcode = int(proxy_ch.read_until_prompt())
+
+            return (retcode, output)
+
+        yield from util.RunCommandProxy._ctx(self.ch, cmd_context)
+
     # Utilities ----- {{{
     _ram_base: int

--
2.30.2
