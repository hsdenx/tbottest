From 95b26dbd7ed4f50a76472761c54ee84d7157b26a Mon Sep 17 00:00:00 2001
From: Heiko Schocher <hs@denx.de>
Date: Sun, 20 Aug 2023 06:16:50 +0200
Subject: [PATCH 15/18] board.uboot: add simple UBootAutobootIntercept

Add UBootAutobootInterceptSimple, which is similiar to
UBootAutobootIntercept but UBootAutobootIntercept has problems
with bootdelay = 0 settings, as it is not fast enough.

This implementation simply sends the autobootkeys and
waits autoboot_timeout for U-Boot prompt. If no U-Boot prompt
found it sends again the autobootkeys. This loop breaks
only if boot_timeout is set.

Works reliable only with one autobootkey, as may U-Boot
starts receiving when this class sends already second byte...

Signed-off-by: Heiko Schocher <hs@denx.de>
---
 tbot/machine/board/__init__.py |  3 +-
 tbot/machine/board/uboot.py    | 89 ++++++++++++++++++++++++++++++++++
 2 files changed, 91 insertions(+), 1 deletion(-)

diff --git a/tbot/machine/board/__init__.py b/tbot/machine/board/__init__.py
index 9fbc2b4..a671043 100644
--- a/tbot/machine/board/__init__.py
+++ b/tbot/machine/board/__init__.py
@@ -2,7 +2,7 @@ import typing
 
 import tbot
 
-from .uboot import UBootShell, UBootAutobootIntercept  # isort: skip
+from .uboot import UBootShell, UBootAutobootIntercept, UBootAutobootInterceptSimple  # isort: skip
 from .board import PowerControl, Board, BoardMachineBase, Connector  # isort: skip
 from .linux import LinuxUbootConnector, LinuxBootLogin  # isort: skip
 from .linux import AskfirstInitializer  # isort: skip
@@ -21,6 +21,7 @@ __all__ = (
     "Raw",
     "Then",
     "UBootAutobootIntercept",
+    "UBootAutobootInterceptSimple",
     "UBootMachine",
     "UBootShell",
 )
diff --git a/tbot/machine/board/uboot.py b/tbot/machine/board/uboot.py
index e79e4cd..edd051f 100644
--- a/tbot/machine/board/uboot.py
+++ b/tbot/machine/board/uboot.py
@@ -141,6 +141,95 @@ class UBootAutobootIntercept(machine.Initializer, UbootStartup):
 
         yield None
 
+class UBootAutobootInterceptSimple(machine.Initializer, UbootStartup):
+    """
+    Machine-initializer to intercept U-Boot autobooting.
+
+    similiar as UBootAutobootIntercept but UBootAutobootIntercept
+    has problems with bootdelay = 0 settings, as it is not fast
+    enough. This implementation simply sends the autobootkeys and
+    waits autoboot_timeout for U-Boot prompt. If no U-Boot prompt
+    found it sends again the autobootkeys. This loop breaks
+    only if boot_timeout is set.
+
+    Works reliable only with one autobootkey, as may U-Boot
+    starts receiving when this class sends already second byte...
+
+    **Example**:
+
+    .. code-block:: python
+
+        import re
+
+        class MyUBoot(
+            board.Connector,
+            board.UBootAutobootInterceptSimple,
+            board.UBootShell,
+        ):
+            autoboot_timeout = 0.05
+            autoboot_keys = " "
+    """
+
+    autoboot_keys: typing.Union[str, bytes] = "\r"
+    """
+    Keys to press as soon as autoboot prompt is detected.
+    """
+
+    autoboot_timeout: typing.Union[float] = 0.1
+    """
+    wait timeout for receiving U-Boot prompt after sending autobootkey
+    """
+
+    autoboot_iter: typing.Union[int] = 1
+
+    @property
+    @abc.abstractmethod
+    def get_death_strings(self) -> List[str]:
+        """
+        return a List of death strings, which are added to the channel
+        in _init_machine()
+        """
+        pass
+
+    @contextlib.contextmanager
+    def _init_machine(self) -> typing.Iterator:
+        ds = self.get_death_strings()
+        for d in ds:
+            self.ch.add_death_string(d)
+
+        if self.autoboot_prompt is not None:
+            i = 0
+            while i < self.autoboot_iter:
+                with self.ch.with_stream(self._uboot_startup_event()):
+                    self.ch.prompt = (
+                        self.prompt.encode("utf-8")
+                        if isinstance(self.prompt, str)
+                        else self.prompt
+                    )
+
+
+                    self.ch.send(self.autoboot_keys, _ignore_blacklist=True)
+
+                    loop = True
+                    while True:
+                        if self.boot_timeout is not None:
+                            assert self._timeout_start is not None
+
+                            if (time.monotonic() - self._timeout_start) > self.boot_timeout:
+                                raise TimeoutError("U-Boot did not reach shell in time")
+
+                        try:
+                            self.ch.read_until_prompt(timeout=self.autoboot_timeout)
+                            loop = False
+                            break
+                        except TimeoutError:
+                            self.ch.send(self.autoboot_keys, _ignore_blacklist=True)
+                            self.ch.sendintr()
+
+                    i += 1
+                    self.ch.sendintr()
+
+        yield None
 
 _hush_find_unsafe = re.compile(r"[^\w@%+=:,./-]", re.ASCII).search
 
-- 
2.30.2

